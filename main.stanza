; Generated by JITX 3.25.0
#use-added-syntax(jitx)
defpackage main :
  import core
  import jitx
  import jitx/commands
  import jitx/parts

  import jsl
  import jsl/bundles

  ; import jsl/protocols/usb
  import jsl/si/constraints
  import jsl/si/pairs
  import jsl/si/helpers
  import jsl/si/couplers
  import jsl/symbols/net-symbols

  import ASM001/board
  import ASM001/helpers
  import ASM001/common/components


; Define the shape/size of the board
val board-size = Dims(100.0, 100.0) 
val board-shape = RoundedRectangle(100.0, 100.0, 0.25)
val VBUS-shape = Rectangle(100.0 / 2.0, 100.0 / 2.0, loc(0.0, 0.0))
val P3V3-shape = RoundedRectangle(100.0, 100.0, 0.25)
val P1V8-shape = RoundedRectangle(100.0, 100.0, 0.25)
val P1V05-shape = RoundedRectangle(100.0, 100.0, 0.25)

; Module to run as a design
pcb-module ASM001-design :
  port gnd
  port vbus
  
  val R-query = get-default-resistor-query()
  val C-query = get-default-capacitor-query()
  
  ;;;;; main power circuits
  inst power-circuit : ASM001/module/power/circuit
  place(power-circuit) at loc(-30.0, 35.0) on Top

  inst asm2464pdx : ASM001/components/Asmedia/ASM2464PDX/module
  place(asm2464pdx) at loc(0.0, 0.0, 0.0) on Top
  place(asm2464pdx.sw) at loc(0.0, 0.0, 0.0) on Top

  net VBUS (vbus power-circuit.vbus.V+ asm2464pdx.vbus)
  net P3V3 (power-circuit.rail-3v3.V+ asm2464pdx.vcch); asm2464pdx.VCCA33)
  net P1V9 (power-circuit.rail-1v9.V+ asm2464pdx.vccl)
  net P1V13 (power-circuit.rail-1v13.V+ asm2464pdx.vdd)
  net GND (gnd power-circuit.vbus.V- power-circuit.rail-3v3.V- power-circuit.rail-1v9.V- power-circuit.rail-1v13.V- asm2464pdx.gnd)

  ; net VBUS (vbus asm2464pdx.vbus)
  ; net GND (gnd asm2464pdx.gnd)

  ; net P3V3 (power-circuit.rail-3v3.V+ asm2464pdx.vcch); asm2464pdx.VCCA33)
  ; net P1V9 (power-circuit.rail-1v9.V+ asm2464pdx.vccl)
  ; net P1V13 (power-circuit.rail-1v13.V+ asm2464pdx.vdd)

  inst vcca33-jumper : create-part(mpn = "RC0201JR-070RL", manufacturer = "YAGEO")
  net P3V3_jumper (P3V3 vcca33-jumper.p[1]) ; internally hook up both 3.3v busses
  net VCCA33 (vcca33-jumper.p[2] asm2464pdx.vcca33) ; internally hook up both 3.3v busses

  geom(VBUS) :
    copper-pour(LayerIndex(2, Top), isolate = 0.127, rank = 1) =  VBUS-shape
  geom(GND) :
    copper-pour(LayerIndex(1, Top), isolate = 0.127, rank = 1) =  board-shape
  ;   copper-pour(LayerIndex(3, Top), isolate = 0.127, rank = 1) =  board-shape
  ;   copper-pour(LayerIndex(4, Top), isolate = 0.127, rank = 1) =  board-shape
  ; ; geom(P3V3) :
  ; ;   copper-pour(LayerIndex(2, Top), isolate = 0.127, rank = 1) =  board-shape
  ; ; geom(P1V8) :
  ; ;   copper-pour(LayerIndex(2, Top), isolate = 0.127, rank = 1) =  board-shape
  ; ; geom(P1V05) :
  ; ;   copper-pour(LayerIndex(2, Top), isolate = 0.127, rank = 1) =  board-shape

  ; geom(GND) :
    ; copper-pour(LayerIndex(1, Top), isolate = 0.127) =  board-shape
  ;   copper-pour(LayerIndex(3, Top), isolate = 0.127) =  board-shape
  ;   copper-pour(LayerIndex(4, Top), isolate = 0.127) =  board-shape


  ;;;;;;;;;;;;;;; DEL
  ; inst asm2464pdx : ASM001/components/Asmedia/ASM2464PDX/module
  ; net (VBUS asm2464pdx.VBUS)
  ; net (P3V3 asm2464pdx.VCCH asm2464pdx.VCCA33)
  ; net (P1V8 asm2464pdx.VCCL)
  ; net (P1V05 asm2464pdx.VDD)

  ; place(asm2464pdx.sw) at loc(0.0, 0.0, 0.0) on Top
  ;;;;;;;;;;;;;;; DEL


  inst usb4_type_c : ASM001/components/USB/USBTypeC/device
  require usb-c-connector : usb-c-connector from usb4_type_c

  net (usb-c-connector.vbus.V+ vbus)
  net (usb-c-connector.vbus.V- gnd)

  place(usb4_type_c) at loc(-45.0, 15.0, 270.0) on Top

  inst W25Q32JVSSIQ : ASM001/components/Winbond/W25Q32JVSSIQ/module

  net (P3V3 W25Q32JVSSIQ.VDD)
  net (GND W25Q32JVSSIQ.GND)

  ;;;;; generic component types
  val r_4k7 = create-resistor(R-query, 
                              case = ["0201", "0402"], 
                              resistance = 4.7e3) ; 4.7K ohm
  val r_100K = create-resistor(R-query, 
                              case = ["0201", "0402"], 
                              resistance = 100.0e3) ; 100K ohm

  val r_12k1 = create-resistor(R-query, 
                              case = ["0201", "0402"], 
                              resistance = 12.1e3,
                              tolerance = 0.01) ; 12.1K ohm

  val c_1uF50V = create-capacitor(C-query, 
                                case = ["0201", "0402"], 
                                capacitance = 1.0e-6,
                                rated-voltage = 50.0) ; 1uF, 50V


  ; ASM2464PDX config straps

  insert-pullup(asm2464pdx.sw.UART_TX, asm2464pdx.vcch,
                    elem-type = r_4k7,
                    inst-name? = to-string("uart_tx-R"),
                    make-public = true)

  ;; RST# RC pull-up
  insert-pullup(asm2464pdx.rst#, asm2464pdx.vcch,
                    elem-type = r_100K,
                    inst-name? = to-string("r_100K"),
                    make-public = true)

  insert-pulldown(asm2464pdx.rst#, GND,
                    elem-type = c_1uF50V,
                    inst-name? = to-string("c_1uF50V"),
                    make-public = true)

  insert-pulldown(asm2464pdx.urext, GND,
                    elem-type = r_12k1,
                    inst-name? = to-string("UREXT-R"),
                    make-public = true)

  
  insert-pulldown(asm2464pdx.test_en, GND,
                    elem-type = r_4k7,
                    inst-name? = to-string("TEST_EN-R"),
                    make-public = true)

  ;; ASM2464PDX SPI memory
  net (asm2464pdx.spi W25Q32JVSSIQ.spi)
  insert-pullup(W25Q32JVSSIQ.sw.SPI_IO2, asm2464pdx.vcch,
                  elem-type = r_4k7,
                  inst-name? = to-string("spi_wp#-R"),
                  make-public = true)

  insert-pullup(W25Q32JVSSIQ.sw.SPI_IO3, asm2464pdx.vcch,
                  elem-type = r_4k7,
                  inst-name? = to-string("spi_hold#-R"),
                  make-public = true)   

  ;; ASM2464PDX 25Mhz 18Pf crystal
  inst crystal_25mhz: ASM001/components/ABRACON/ABMM2-25_000MHZ-D1-T/component
  inst crystal_c : ASM001/components/KYOCERA-AVX/_04025A100FAT2A/component
  net (crystal_25mhz.GND0 GND)
  net (crystal_25mhz.GND1 GND)

  net (asm2464pdx.xi crystal_25mhz.p[1] crystal_c.p[1])
  net (asm2464pdx.xo crystal_25mhz.p[3] crystal_c.p[2])


  require asm2464pdx_usb-c : usb-c(2) from asm2464pdx

  net (usb-c-connector.vbus.V+ asm2464pdx.vbus)
  net (usb-c-connector.vbus.V- asm2464pdx.gnd)

  net (usb-c-connector.bus.cc[0], asm2464pdx_usb-c.cc[0])
  net (usb-c-connector.bus.cc[1], asm2464pdx_usb-c.cc[1])

  net (usb-c-connector.bus.sbu[0], asm2464pdx_usb-c.sbu[0])
  net (usb-c-connector.bus.sbu[1], asm2464pdx_usb-c.sbu[1])

  ; inst esd-pair : dp-coupler(
  ;     ASM001/components/Infineon/ESD132-B1-W0201-E6327/component,
  ;     pre-pose = loc(0.0, 0.0, 90.0)
  ;  )[2]
  ; for i in 0 to 2 do :
  ;   topo-net(usb-c-connector.bus.lane[i] => esd-pair[i].A => esd-pair[i].B => asm2464pdx_usb-c.lane[i]); => esd-pair.A => esd-pair.B => )


  ; By setting the signal end - then the routing structure application
  ; ;   can apply to the entirety of the bus.
  ; ; set-signal-end(asm2464pdx_usb-c.data.P, usb-c-connector.data.P)
  ; ; set-signal-end(asm2464pdx_usb-c.data.N, usb-c-connector.data.N)
  
  ; ; According to USB4 System Design Guidelines
  val bleed-R = create-resistor(R-query, 
                              case = valid-smd-pkgs("0201"), 
                              resistance = Interval(200.0e3, 242.0e3) ; 220k ohm
                              )
  
  val rx-ac-C = create-capacitor(C-query, 
                                case = valid-smd-pkgs("0201"), 
                                capacitance = Interval(300.0e-9, 363.0e3)) ; 0.33uf

  val tx-ac-C = create-capacitor(C-query,
                                case = valid-smd-pkgs("0201"), 
                                capacitance = Interval(135.0e-9, 265.0e3)) ; 0.22uf

  for i in 0 to length(usb-c-connector.bus.lane) do:
    inst tx-bcap : dp-coupler(tx-ac-C)
    inst rx-bcap : dp-coupler(rx-ac-C)

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ESD
    
    inst esd-cap : dp-coupler(
      ASM001/components/Infineon/ESD132-B1-W0201-E6327/component,
      pre-pose = loc(0.0, 0.0, 90.0)
    )

    topo-pair(asm2464pdx_usb-c.lane[i].TX => tx-bcap => esd-cap => usb-c-connector.bus.lane[i].TX) ;tx-bcap => 
    topo-pair(asm2464pdx_usb-c.lane[i].RX => rx-bcap => esd-cap => usb-c-connector.bus.lane[i].RX) ;=> rx-bcap

    ; RX bleed resistors
    insert-pulldown(usb-c-connector.bus.lane[i].RX.P, GND, 
                    elem-type = bleed-R,
                    inst-name? = to-string("RX_P%_-R" % [i]), 
                    make-public = true)
    ; insert-pulldown(usb-c-connector.bus.lane[i].RX.N, GND,
    ;                 elem-type = bleed-R,
    ;                 inst-name? = to-string("RX_N%_-R" % [i]),
    ;                 make-public = true)

    ; TX bleed resistors
    insert-pulldown(usb-c-connector.bus.lane[i].TX.P, GND,
                    elem-type = bleed-R,
                    inst-name? = to-string("TX_P%_-R" % [i]),
                    make-public = true)
    ; insert-pulldown(usb-c-connector.bus.lane[i].TX.N, GND,
    ;                 elem-type = bleed-R,
    ;                 inst-name? = to-string("TX_N%_-R" % [i]),
    ;                 make-public = true)

  ; val ti-2 = usb-get-trace-impedance(USB2)
  ; val usb2-constraints = USB-Constraint(proto = USB2, route-struct = diff(ti-2))
  ; constrain-topology(asm2464pdx_usb-c.data => usb-c-connector.data, usb2-constraints)

  ; val b-cap = block-cap(100.0e-9)

  ; val ti-4 = usb-get-trace-impedance(USB4)
  ; val usb4-constraints = USB-Constraint(proto = USB4, route-struct = diff(ti-4))
  ; val lane-constraint = LaneConstraint(usb4-constraints)
  ; for i in indices(asm2464pdx_usb-c.lane) do :
  ;   within [src, dst] = constrain-topology(asm2464pdx_usb-c.lane[i] => usb-c-connector.bus.lane[i], lane-constraint):
  ;     ; Here we construct the differential pair topology for the lane.
  ;     ; The Lane consists of two diff-pairs - TX and RX
  ;     topo-pair(src.RX => dst.RX)

  ;     ; The TX channel needs a blocking capacitor which we add with
  ;     ;  the help of the `topo-pair` utility. This is like `topo-net`
  ;     ;  but handles extracting the `dual-pair` require from the
  ;     ;  `tx-bcap` for us.
  ;     ; inst tx-bcap : dp-coupler(b-cap)
  ;     topo-pair(src.TX => dst.TX)
  ;   ; set-signal-end(asm2464pdx_usb-c.lane, usb-c-connector.bus.lane)
    
  ; ; inst header : ASM001/components/headers/header-test(2,1)
  ; ; place(header) at loc(-20.0, 15.0) on Top

  
 


  ; val version = PCIE-V4
  ; val trace-imped = pcie-get-trace-impedance(version)
  ; val cst = PCIe-Constraint(version, diff(trace-imped))

  ; val pcie-b-cap = block-cap(220.0e-9)

  ;   ; Construct a typical connector setup
  ; ;  for a 4x 1 lane configuration. This means a
  ; ;  straight through `tx => bcap => tx` and `rx => rx`
  ; ;  configuration.


  ; val m2_connector_count = 4
  ; inst m2_connectors : ASM001/components/TE_1-2199230-6/module[m2_connector_count]


  ; ;  within [src, dst-straight] = constrain-topology(src-IC, dst-IC, cst):
  ; ;   ;  Notice that the `reverse-pcie-lane` function handles the null-modem
  ; ;   ;  swap. We continue to use `tx => tx` and `rx => rx` inside for
  ; ;   ;  consistency.
  ; ;   val dst = reverse-pcie-lanes(dst-straight)
  ; ;   for i in indices(src.data.lane) do:
  ; ;     inst tx-coupler : dp-coupler(b-cap)
  ; ;     topo-pair(src.data.lane[i].TX => tx-coupler => dst.data.lane[i].TX)
  ; ;     inst rx-coupler : dp-coupler(b-cap)
  ; ;     topo-pair(src.data.lane[i].RX => rx-coupler => dst.data.lane[i].RX)

  ; ;   topo-net(src.data.refclk => dst.data.refclk)
  ; ;   net (src.control, dst.control)

  ; for i in 0 to length(m2_connectors) :
  ;   require src-ic : pcie-std(1) from asm2464pdx
  ;   require dst-ep : pcie-std(1) from m2_connectors[i]

  ;   val y-loc = -36.0 - (to-double(i) * -24.0)
  ;   place(m2_connectors[i].sw) at loc(35.0, y-loc, 90.0) on Bottom
    
  ;   net (m2_connectors[i].gnd GND)


   
  ;   within [src, dst] = constrain-topology(src-ic, dst-ep, cst):
  ;     ; Here we construct the circuit topology for the link
  ;     ;   Note that we don't need to worry about any of the constraint
  ;     ;   application, as that is handled by the `PCIe-Constraint` type.
  ;     ;   You can add other components in the topology as you wish - below
  ;     ;   is a typical basic implementation.
  ;     for i in indices(src.data.lane) do:
  ;       inst tx-coupler : dp-coupler(pcie-b-cap)
  ;       topo-pair(src.data.lane[i].TX => tx-coupler => dst.data.lane[i].TX)
  ;       ; No Blocking Caps on the Receive side.
  ;       topo-pair(src.data.lane[i].RX => dst.data.lane[i].RX)

  ;     topo-net(src.data.refclk => dst.data.refclk)
  ;     ; The control signals do not demand a topology so
  ;     ;  we just use a straight net connection.
  ;     net (src.control, dst.control)
      

  ; schematic symbols
  symbol(GND) = GND-SYMB
  symbol(VBUS) = PWR-SYMB
  symbol(P3V3) = PWR-SYMB
  symbol(P1V9) = PWR-SYMB
  symbol(P1V13) = PWR-SYMB

; Set the :
;     design-name     - a directory with this name will be created in the "designs" directory
;     board           - a Board object representing the stackup, rules and board shape for a particular design
;     signal-shrink   - a distance in mm to pull back copper signals from the board edge
setup-design("ASM001-design", board-shape, signal-shrink = 0.5)

; Set the top level module (the module to be compile into a schematic and PCB)
set-main-module(ASM001-design)

; View the results
; take a look at the BOM that was generated
; view-bom(BOM-STD)
; examine the schematic that was auto-generated
; view-schematic()
; view the board that was created
view-board()

; export-design()

