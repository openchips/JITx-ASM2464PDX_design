; Generated by JITX 3.25.0
#use-added-syntax(jitx)
defpackage main :
  import core
  import jitx
  import jitx/commands
  import jitx/parts

  import jsl
  import helpers
  import jsl/bundles

  ; import jsl/protocols/usb
  import jsl/si/constraints
  import jsl/si/pairs
  import jsl/si/helpers
  import jsl/si/couplers
  import jsl/symbols/net-symbols

  import board
  import ASM001/common/components
  ; import ASM001/components
  

  ; import ASM001/components/TE_2388749-1 ; Import the package containing the definition

; Define the shape/size of the board
val board-shape = RoundedRectangle(100.0, 100.0, 0.25)

; Module to run as a design
pcb-module ASM001-design :
  ; define some pins/ports
  port gnd
  port vbus

  net GND (gnd)
  net VBUS (vbus)

  geom(GND) :
    copper-pour(LayerIndex(1, Top), isolate = 0.127) =  board-shape
    copper-pour(LayerIndex(3, Top), isolate = 0.127) =  board-shape
    copper-pour(LayerIndex(4, Top), isolate = 0.127) =  board-shape

  val R-query = get-default-resistor-query()
  val C-query = get-default-capacitor-query()
  
  inst power-circuit : ASM001/module/power/circuit
  inst asm2464pdx : ASM001/components/Asmedia/ASM2464PDX/module
  inst usb4_type_c : ASM001/components/USB/USBTypeC/conn-component
  inst W25Q32JVSSIQ : ASM001/components/Winbond/W25Q32JVSSIQ/module
  inst m2_connector : ASM001/components/TE_1-2199230-6/module


  net (power-circuit.vbus asm2464pdx.VBUS VBUS)
  net (power-circuit.vout-3v3-V+ asm2464pdx.VCCH asm2464pdx.VCCA33) ; VCCA33 should be connected to an LDO or at least a low pass filter
  net (power-circuit.vout-1v8-V+ asm2464pdx.VCCL)
  net (power-circuit.vout-1v05-V+ asm2464pdx.VDD)
    
  net (power-circuit.gnd GND)
  net (m2_connector.gnd GND)

  require asm2464pdx_usb-c : usb-c(2) from asm2464pdx
  require connector_usb-c : usb-c-connector from usb4_type_c
  ; require spi-data : spi-with-cs() from W25Q32JVSSIQ

  net (W25Q32JVSSIQ.spi, asm2464pdx.spi)

  net (connector_usb-c.vbus.V+ asm2464pdx.VCCH asm2464pdx.VBUS VBUS)
  net (connector_usb-c.vbus.V- asm2464pdx.GND GND)

  net (connector_usb-c.bus.cc[0], asm2464pdx_usb-c.cc[0])
  net (connector_usb-c.bus.cc[1], asm2464pdx_usb-c.cc[1])

  net (connector_usb-c.bus.sbu[0], asm2464pdx_usb-c.sbu[0])
  net (connector_usb-c.bus.sbu[1], asm2464pdx_usb-c.sbu[1])

  ; ASM2464PDX 25Mhz 18Pf crystal
  inst crystal_25mhz: ASM001/components/ABRACON/ABMM2-25_000MHZ-D1-T/component
  inst crystal_c : ASM001/components/KYOCERA-AVX/_04025A100FAT2A/component
  net (crystal_25mhz.GND0 GND)
  net (crystal_25mhz.GND1 GND)
  net (asm2464pdx.XI crystal_25mhz.p[1])
  net (asm2464pdx.XO crystal_25mhz.p[3])

  net (asm2464pdx.XI crystal_c.p[1])
  net (asm2464pdx.XO crystal_c.p[2])

    
  val urext-C = create-resistor(R-query, 
                                case = ["0201", "0402"], 
                                resistance = 12.1e3) ; 12.1K ohm

  insert-pulldown(asm2464pdx.UREXT, GND,
                    elem-type = urext-C,
                    inst-name? = to-string("UREXT-C"),
                    make-public = true)


  ; ASM2464PDX config straps
  net (asm2464pdx.RST#, asm2464pdx.VCCH)

  public inst esd-prot : diodes/ESD224DQAR/device
  net (esd-prot.GND[1], esd-prot.GND[2], GND)

  ; Construct the topology from the module port, through
  ;  the ESD protector, and then terminating in the connector device.
  require esd-pair:dual-pair from esd-prot
  topo-pair(asm2464pdx_usb-c.data => esd-pair.A => esd-pair.B => connector_usb-c.bus.data)
  ; By setting the signal end - then the routing structure application
  ;   can apply to the entirety of the bus.
  ; set-signal-end(asm2464pdx_usb-c.data.P, connector_usb-c.bus.data.P)
  ; set-signal-end(asm2464pdx_usb-c.data.N, connector_usb-c.bus.data.N)
  
  ; According to USB4 System Design Guidelines
  val bleed-R = create-resistor(R-query, 
                              case = valid-smd-pkgs("0201"), 
                              resistance = Interval(200.0e3, 242.0e3) ; 220k ohm
                              )
  
  val rx-ac-C = create-capacitor(C-query, 
                                case = valid-smd-pkgs("0201"), 
                                capacitance = Interval(300.0e-9, 363.0e3)) ; 0.33uf

  val tx-ac-C = create-capacitor(C-query,
                                case = valid-smd-pkgs("0201"), 
                                capacitance = Interval(135.0e-9, 265.0e3)) ; 0.22uf

  ; val esd-lanes = diodes/ESD224DQAR/create-esd-pool(2, GND)

  ; USB-C CC pull-down resistors
  val cc-R = create-capacitor(C-query, capacitance = 2.2E-9, precision = (10 %), rated-voltage = 50.0) ; 220 pf / 50V
  for i in indices(asm2464pdx_usb-c.cc) do:
    val n = to-string("CC%_-R" % [i])
    insert-pulldown(asm2464pdx_usb-c.cc[i], GND,
                  elem-type = cc-R,
                  inst-name? = n,
                  make-public = true)

  for i in 0 to length(asm2464pdx_usb-c.lane) do:
    inst tx-bcap : dp-coupler(tx-ac-C)
    inst rx-bcap : dp-coupler(rx-ac-C)

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ESD
    val usb4-esd-cap = create-part(mpn = "ESD132-B1-W0201 E6327", manufacturer = "Infineon")
    inst lane-esd-tx : dp-coupler(usb4-esd-cap)
    inst lane-esd-rx : dp-coupler(usb4-esd-cap)
    
    ; require tx-esd:dual-pair from esd-lanes
    topo-pair(asm2464pdx_usb-c.lane[i].TX => lane-esd-tx => tx-bcap => connector_usb-c.bus.lane[i].TX)

    ; require rx-esd:dual-pair from esd-lanes
    topo-pair(asm2464pdx_usb-c.lane[i].RX => lane-esd-rx => rx-bcap => connector_usb-c.bus.lane[i].RX)

    ; RX bleed resistors
    insert-pulldown(asm2464pdx_usb-c.lane[i].RX.P, GND, 
                    elem-type = bleed-R,
                    inst-name? = to-string("RX_P%_-R" % [i]), 
                    make-public = true)
    insert-pulldown(asm2464pdx_usb-c.lane[i].RX.N, GND,
                    elem-type = bleed-R,
                    inst-name? = to-string("RX_N%_-R" % [i]),
                    make-public = true)

    ; TX bleed resistors
    insert-pulldown(asm2464pdx_usb-c.lane[i].TX.P, GND,
                    elem-type = bleed-R,
                    inst-name? = to-string("TX_P%_-R" % [i]),
                    make-public = true)
    insert-pulldown(asm2464pdx_usb-c.lane[i].TX.N, GND,
                    elem-type = bleed-R,
                    inst-name? = to-string("TX_N%_-R" % [i]),
                    make-public = true)

    
  ; Shield Termination
  inst shield-term : shield-termination(R-query, C-query)
  net (shield-term.SHIELD, connector_usb-c.shield)
  net (shield-term.GND, GND)

  val ti-2 = usb-get-trace-impedance(USB2)
  val usb2-constraints = USB-Constraint(proto = USB2, route-struct = diff(ti-2))
  constrain-topology(asm2464pdx_usb-c.data => connector_usb-c.bus.data, usb2-constraints)

  val b-cap = block-cap(100.0e-9)

  val ti-4 = usb-get-trace-impedance(USB4)
  val usb4-constraints = USB-Constraint(proto = USB4, route-struct = diff(ti-4))
  val lane-constraint = LaneConstraint(usb4-constraints)
  for i in indices(asm2464pdx_usb-c.lane) do :
    within [src, dst] = constrain-topology(asm2464pdx_usb-c.lane[i] => connector_usb-c.bus.lane[i], lane-constraint):
      ; Here we construct the differential pair topology for the lane.
      ; The Lane consists of two diff-pairs - TX and RX
      topo-pair(src.RX => dst.RX)

      ; The TX channel needs a blocking capacitor which we add with
      ;  the help of the `topo-pair` utility. This is like `topo-net`
      ;  but handles extracting the `dual-pair` require from the
      ;  `tx-bcap` for us.
      ; inst tx-bcap : dp-coupler(b-cap)
      topo-pair(src.TX => dst.TX)
    ; set-signal-end(asm2464pdx_usb-c.lane, connector_usb-c.bus.lane)
    
  ; inst header : ASM001/components/headers/header-test(2,1)
  ; place(header) at loc(-20.0, 15.0) on Top

  
  val version = PCIE-V4
  val trace-imped = pcie-get-trace-impedance(version)
  val cst = PCIe-Constraint(version, diff(trace-imped))

  val pcie-b-cap = block-cap(220.0e-9)

  ; Construct a typical passive connector setup
  ;  for a 4 lane configuration. This means a
  ;  straight through `tx => tx` and `rx => rx`
  ;  configuration.



  require src-ep : pcie(4) from asm2464pdx
  require dst-ep : pcie(4) from m2_connector

  within [src, dst] = constrain-topology(src-ep, dst-ep, cst):
    ; Here we construct the circuit topology for the link
    ;   Note that we don't need to worry about any of the constraint
    ;   application, as that is handled by the `PCIe-Constraint` type.
    ;   You can add other components in the topology as you wish - below
    ;   is a typical basic implementation.
    for i in indices(src.data.lane) do:
      inst tx-coupler : dp-coupler(pcie-b-cap)
      topo-pair(src.data.lane[i].TX => tx-coupler => dst.data.lane[i].TX)
      ; No Blocking Caps on the Receive side.
      topo-pair(src.data.lane[i].RX => dst.data.lane[i].RX)

    topo-net(src.data.refclk => dst.data.refclk)
    ; The control signals do not demand a topology so
    ;  we just use a straight net connection.
    net (src.control, dst.control)

  ; schematic symbols
  symbol(GND) = GND-SYMB
  symbol(VBUS) = PWR-SYMB

; Set the :
;     design-name     - a directory with this name will be created in the "designs" directory
;     board           - a Board object representing the stackup, rules and board shape for a particular design
;     signal-shrink   - a distance in mm to pull back copper signals from the board edge
setup-design("ASM001-design", board-shape, signal-shrink = 0.5)

; Set the top level module (the module to be compile into a schematic and PCB)
set-main-module(ASM001-design)

; View the results
; take a look at the BOM that was generated
view-bom(BOM-STD)
; examine the schematic that was auto-generated
view-schematic()
; view the board that was created
view-board()


