; Generated by JITX 3.23.0
#use-added-syntax(jitx)
defpackage main :
  import core
  import jitx
  import jitx/commands
  import ocdb/utils/generic-components
  import jitx/parts


  import jsl
  import helpers
  import jsl/bundles
  import jsl/protocols/usb
  import jsl/si/constraints
  import jsl/si/pairs
  import jsl/si/helpers
  import jsl/si/couplers
  import jsl/symbols/net-symbols


  import ASM001/common/board
  import ASM001/common/components
  import ASM001/components/TE_2388749-1 ; Import the package containing the definition


; Define the shape/size of the board
; val board-shape = RoundedRectangle(30.0, 18.5, 0.25)



; Module to run as a design
pcb-module my-design :
  ; define some pins/ports
  port gnd
  port vdd
  port signal

  net GND (gnd)
  net VDD (vdd)

  ; 1.05v reg 2a/3a/4a
  ; 1.8v reg 2a/3a/4a
  ; 3.3v reg 2a/3a/4a
  ; 3.3v LDO 500mA

  ; inst W25Q32JVSSIQ : database-part(["manufacturer" => "Winbond", "mpn" => "W25Q32JVSSIQ"])


  inst asm2464pdx : ASM001/components/Asmedia/ASM2464PDX/module
  ; inst usb4_type_c : ASM001/components/TE_2388749-1/module
  inst usb4_type_c : ASM001/components/USB/USBTypeC/USBC-USB4-Iface()

  ; inst usb4_type_c : USBC-USB4-Iface()

  require ep1 : usb-c(2) from asm2464pdx
  require ep2 : usb-c(2) from usb4_type_c

  val ti-2 = usb-get-trace-impedance(USB2)
  val usb2-constraints = USB-Constraint(proto = USB2, route-struct = diff(ti-2))
  constrain-topology(ep1.data => ep2.data, usb2-constraints)

  val b-cap = block-cap(100.0e-9)

  val ti-4 = usb-get-trace-impedance(USB4)
  val usb4-constraints = USB-Constraint(proto = USB4, route-struct = diff(ti-4))
  val lane-constraint = LaneConstraint(usb4-constraints)
  for i in indices(ep1.lane) do :
    within [src, dst] = constrain-topology(ep1.lane[i] => ep2.lane[i], lane-constraint):
      ; Here we construct the differential pair topology for the lane.
      ; The Lane consists of two diff-pairs - TX and RX
      topo-pair(src.RX => dst.RX)

      ; The TX channel needs a blocking capacitor which we add with
      ;  the help of the `topo-pair` utility. This is like `topo-net`
      ;  but handles extracting the `dual-pair` require from the
      ;  `tx-bcap` for us.
      ; inst tx-bcap : dp-coupler(b-cap)
      topo-pair(src.TX => dst.TX)

  inst header : pin-header(2, 1)
  place(header) at loc(-20.0, 15.0) on Top

  
  val version = PCIE-V4
  val trace-imped = pcie-get-trace-impedance(version)
  val cst = PCIe-Constraint(version, diff(trace-imped))

  val pcie-b-cap = block-cap(220.0e-9)

  ; Construct a typical passive connector setup
  ;  for a 4 lane configuration. This means a
  ;  straight through `tx => tx` and `rx => rx`
  ;  configuration.

  inst m2_connector : ASM001/components/TE_1-2199230-6/module


  require src-ep : pcie(4) from asm2464pdx
  require dst-ep : pcie(4) from m2_connector

  within [src, dst] = constrain-topology(src-ep, dst-ep, cst):
    ; Here we construct the circuit topology for the link
    ;   Note that we don't need to worry about any of the constraint
    ;   application, as that is handled by the `PCIe-Constraint` type.
    ;   You can add other components in the topology as you wish - below
    ;   is a typical basic implementation.
    for i in indices(src.data.lane) do:
      inst tx-coupler : dp-coupler(pcie-b-cap)
      topo-pair(src.data.lane[i].TX => tx-coupler => dst.data.lane[i].TX)
      ; No Blocking Caps on the Receive side.
      topo-net(src.data.lane[i].RX => dst.data.lane[i].RX)

    topo-net(src.data.refclk => dst.data.refclk)
    ; The control signals do not demand a topology so
    ;  we just use a straight net connection.
    net (src.control, dst.control)


  ; schematic symbols
  symbol(GND) = GND-SYMB
  symbol(VDD) = PWR-SYMB

; Set the :
;     design-name     - a directory with this name will be created in the "designs" directory
;     board           - a Board object representing the stackup, rules and board shape for a particular design
setup-design("jitx-design", board-shape)

; Set the top level module (the module to be compile into a schematic and PCB)
set-main-module(my-design)

; View the results
; take a look at the BOM that was generated
view-bom(BOM-STD)
; examine the schematic that was auto-generated
view-schematic()
; view the board that was created
view-board()

